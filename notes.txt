Constant Time => 1 => No matter how many elements we're working with, the algorithm/operation/whatever will alaways take the same amount of time.

Logarithmic Time => log(n) => You have this if doubling the number of elements you are iterating over doesnt double the amount of work. Always assume that searching operations are log(n)

Linear Time => n => iterating through all elements in a collection of data. If you see a for loop spanning from '0' to array.length, you probably have 'n', or linear runtime

Quaslinear Time => n * log(n) => You have this if you doubling the number of elements you are iterating over doesnt double the amount of work. Always assume that any sorting operation is n * log(n)

Quadratic Time => n^2 => Every element in a collection has to be compared to every other element. 'The Handshake Problem'

Exponential Time => 2^n => if you add a *single* element to a collection, the processing power required doubles

Big O Notation
O(n) - Linear 
O(1) - Constant 
O(n^2) - Quadratic 

Identifying Runtime 
Iterating through a simple for loop through a single collection -> Likely O(n)
Iterating through half of a collection -> Likely O(n). There are no constants in runtime 
Iterating through two different collections with seprate for loops -> O(n+m)
Two nested for loops iterating over the same collection -> O(n^2)
Two nested for loops iterating over different collections -> O(n*m)
Sorting -> O(n*log(n))
Searching a sorted array -> O(log(n))

Space Complexity - How much more memory is required to perform a function

Memoization - store the arguments of each function call along with the result. If the function is called again with the same arguments, return the precomputed result, rather than running the function again.

Data Structures - Ways of organizing information with optimal 'runtime complexity' for adding or removing records

Javascript natively implements several datastructures. **However you will still be asked about 'inferior' data structures.**

Queue - Essential an Array 
Enqueing - adding to the queue 
Dequeing - removing from the queue 
FIFO - First In First Out 


Depth Traversal - Start at the top of the tree, then move down the furthest left branch, then traverse to the top and repeat the process to the branch on the next branch until the last branch on the right is traversed 

Breadth Traversal - Iterate at each level of the tree and when complete move to the next level on the tree

Nodes on the same line and parernt Node will be considered siblings 

Binary Search Tree 

Binary Tree